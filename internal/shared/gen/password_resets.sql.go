// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: password_resets.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordReset = `-- name: CreatePasswordReset :exec
INSERT INTO password_resets (user_id, reset_token, expires_at)
VALUES ($1, $2, $3)
`

type CreatePasswordResetParams struct {
	UserID     pgtype.UUID
	ResetToken string
	ExpiresAt  int64
}

func (q *Queries) CreatePasswordReset(ctx context.Context, arg CreatePasswordResetParams) error {
	_, err := q.db.Exec(ctx, createPasswordReset, arg.UserID, arg.ResetToken, arg.ExpiresAt)
	return err
}

const deletePasswordReset = `-- name: DeletePasswordReset :exec
DELETE FROM password_resets WHERE user_id = $1 AND reset_token = $2
`

type DeletePasswordResetParams struct {
	UserID     pgtype.UUID
	ResetToken string
}

func (q *Queries) DeletePasswordReset(ctx context.Context, arg DeletePasswordResetParams) error {
	_, err := q.db.Exec(ctx, deletePasswordReset, arg.UserID, arg.ResetToken)
	return err
}

const getPasswordReset = `-- name: GetPasswordReset :one
SELECT id, user_id, reset_token, expires_at, created_at FROM password_resets WHERE user_id = $1 AND reset_token = $2
`

type GetPasswordResetParams struct {
	UserID     pgtype.UUID
	ResetToken string
}

func (q *Queries) GetPasswordReset(ctx context.Context, arg GetPasswordResetParams) (PasswordReset, error) {
	row := q.db.QueryRow(ctx, getPasswordReset, arg.UserID, arg.ResetToken)
	var i PasswordReset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResetToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username, password, phone_number, first_name, last_name)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, email, username, password, is_verified, phone_number, first_name, last_name, status, language, created_at, updated_at
`

type CreateUserParams struct {
	Email       string
	Username    string
	Password    string
	PhoneNumber string
	FirstName   string
	LastName    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.PhoneNumber,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsVerified,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.Status,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password, is_verified, phone_number, first_name, last_name, status, language, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsVerified,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.Status,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserEmailExists = `-- name: GetUserEmailExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) GetUserEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, getUserEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getUsernameExists = `-- name: GetUsernameExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE username = $1)
`

func (q *Queries) GetUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, getUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users SET is_verified = TRUE WHERE id = $1
`

func (q *Queries) VerifyUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, verifyUser, id)
	return err
}

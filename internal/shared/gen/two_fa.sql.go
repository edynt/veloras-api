// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: two_fa.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const create2FACode = `-- name: Create2FACode :one
INSERT INTO two_fa_codes (user_id, code, expires_at, type)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, code, expires_at, type, created_at
`

type Create2FACodeParams struct {
	UserID    pgtype.UUID
	Code      string
	ExpiresAt int64
	Type      string
}

func (q *Queries) Create2FACode(ctx context.Context, arg Create2FACodeParams) (TwoFaCode, error) {
	row := q.db.QueryRow(ctx, create2FACode,
		arg.UserID,
		arg.Code,
		arg.ExpiresAt,
		arg.Type,
	)
	var i TwoFaCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Code,
		&i.ExpiresAt,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const delete2FACode = `-- name: Delete2FACode :exec
DELETE FROM two_fa_codes WHERE user_id = $1 AND type = $2
`

type Delete2FACodeParams struct {
	UserID pgtype.UUID
	Type   string
}

func (q *Queries) Delete2FACode(ctx context.Context, arg Delete2FACodeParams) error {
	_, err := q.db.Exec(ctx, delete2FACode, arg.UserID, arg.Type)
	return err
}

const deleteExpired2FACodes = `-- name: DeleteExpired2FACodes :exec
DELETE FROM two_fa_codes WHERE expires_at < $1
`

func (q *Queries) DeleteExpired2FACodes(ctx context.Context, expiresAt int64) error {
	_, err := q.db.Exec(ctx, deleteExpired2FACodes, expiresAt)
	return err
}

const get2FACode = `-- name: Get2FACode :one
SELECT id, user_id, code, expires_at, type, created_at FROM two_fa_codes WHERE user_id = $1 AND code = $2 AND type = $3
`

type Get2FACodeParams struct {
	UserID pgtype.UUID
	Code   string
	Type   string
}

func (q *Queries) Get2FACode(ctx context.Context, arg Get2FACodeParams) (TwoFaCode, error) {
	row := q.db.QueryRow(ctx, get2FACode, arg.UserID, arg.Code, arg.Type)
	var i TwoFaCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Code,
		&i.ExpiresAt,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getUser2FACodes = `-- name: GetUser2FACodes :many
SELECT id, user_id, code, expires_at, type, created_at FROM two_fa_codes WHERE user_id = $1 AND type = $2
`

type GetUser2FACodesParams struct {
	UserID pgtype.UUID
	Type   string
}

func (q *Queries) GetUser2FACodes(ctx context.Context, arg GetUser2FACodesParams) ([]TwoFaCode, error) {
	rows, err := q.db.Query(ctx, getUser2FACodes, arg.UserID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TwoFaCode{}
	for rows.Next() {
		var i TwoFaCode
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Code,
			&i.ExpiresAt,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update2FAEnabled = `-- name: Update2FAEnabled :exec
UPDATE users SET two_fa_enabled = $1, two_fa_secret = $2 WHERE id = $3
`

type Update2FAEnabledParams struct {
	TwoFaEnabled pgtype.Bool
	TwoFaSecret  pgtype.Text
	ID           pgtype.UUID
}

func (q *Queries) Update2FAEnabled(ctx context.Context, arg Update2FAEnabledParams) error {
	_, err := q.db.Exec(ctx, update2FAEnabled, arg.TwoFaEnabled, arg.TwoFaSecret, arg.ID)
	return err
}

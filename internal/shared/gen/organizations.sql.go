// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organizations.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignUserToOrganization = `-- name: AssignUserToOrganization :exec
UPDATE users SET organization_id = $1 WHERE id = $2
`

type AssignUserToOrganizationParams struct {
	OrganizationID pgtype.UUID
	ID             pgtype.UUID
}

func (q *Queries) AssignUserToOrganization(ctx context.Context, arg AssignUserToOrganizationParams) error {
	_, err := q.db.Exec(ctx, assignUserToOrganization, arg.OrganizationID, arg.ID)
	return err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (name, description, parent_id, created_by)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, parent_id, created_by, created_at, updated_at
`

type CreateOrganizationParams struct {
	Name        string
	Description pgtype.Text
	ParentID    pgtype.UUID
	CreatedBy   pgtype.UUID
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.Name,
		arg.Description,
		arg.ParentID,
		arg.CreatedBy,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ParentID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrganization, id)
	return err
}

const getOrganizationById = `-- name: GetOrganizationById :one
SELECT id, name, description, parent_id, created_by, created_at, updated_at FROM organizations WHERE id = $1
`

func (q *Queries) GetOrganizationById(ctx context.Context, id pgtype.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationById, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ParentID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrganizationUsers = `-- name: GetOrganizationUsers :many
SELECT u.id, u.email, u.username, u.password, u.is_verified, u.phone_number, u.first_name, u.last_name, u.status, u.language, u.created_at, u.updated_at, u.two_fa_secret, u.two_fa_enabled, u.failed_login_attempts, u.locked_until, u.organization_id, u.last_login_at FROM users u WHERE u.organization_id = $1
`

func (q *Queries) GetOrganizationUsers(ctx context.Context, organizationID pgtype.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, getOrganizationUsers, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.IsVerified,
			&i.PhoneNumber,
			&i.FirstName,
			&i.LastName,
			&i.Status,
			&i.Language,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TwoFaSecret,
			&i.TwoFaEnabled,
			&i.FailedLoginAttempts,
			&i.LockedUntil,
			&i.OrganizationID,
			&i.LastLoginAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizationsByParent = `-- name: GetOrganizationsByParent :many
SELECT id, name, description, parent_id, created_by, created_at, updated_at FROM organizations WHERE parent_id = $1
`

func (q *Queries) GetOrganizationsByParent(ctx context.Context, parentID pgtype.UUID) ([]Organization, error) {
	rows, err := q.db.Query(ctx, getOrganizationsByParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organization{}
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ParentID,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserOrganization = `-- name: GetUserOrganization :one
SELECT o.id, o.name, o.description, o.parent_id, o.created_by, o.created_at, o.updated_at FROM organizations o
JOIN users u ON u.organization_id = o.id
WHERE u.id = $1
`

func (q *Queries) GetUserOrganization(ctx context.Context, id pgtype.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getUserOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ParentID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :exec
UPDATE organizations SET name = $1, description = $2, updated_at = $3 WHERE id = $4
`

type UpdateOrganizationParams struct {
	Name        string
	Description pgtype.Text
	UpdatedAt   pgtype.Int8
	ID          pgtype.UUID
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) error {
	_, err := q.db.Exec(ctx, updateOrganization,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

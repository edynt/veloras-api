// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: audit_logs.sql

package gen

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO audit_logs (user_id, action, resource_type, resource_id, details, ip_address, user_agent)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, action, resource_type, resource_id, details, ip_address, user_agent, created_at
`

type CreateAuditLogParams struct {
	UserID       pgtype.UUID
	Action       string
	ResourceType string
	ResourceID   pgtype.Text
	Details      []byte
	IpAddress    *netip.Addr
	UserAgent    pgtype.Text
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuditLog, error) {
	row := q.db.QueryRow(ctx, createAuditLog,
		arg.UserID,
		arg.Action,
		arg.ResourceType,
		arg.ResourceID,
		arg.Details,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.ResourceType,
		&i.ResourceID,
		&i.Details,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOldAuditLogs = `-- name: DeleteOldAuditLogs :exec
DELETE FROM audit_logs WHERE created_at < $1
`

func (q *Queries) DeleteOldAuditLogs(ctx context.Context, createdAt pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteOldAuditLogs, createdAt)
	return err
}

const getAuditLogsByAction = `-- name: GetAuditLogsByAction :many
SELECT id, user_id, action, resource_type, resource_id, details, ip_address, user_agent, created_at FROM audit_logs WHERE action = $1 ORDER BY created_at DESC LIMIT $2
`

type GetAuditLogsByActionParams struct {
	Action string
	Limit  int32
}

func (q *Queries) GetAuditLogsByAction(ctx context.Context, arg GetAuditLogsByActionParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByAction, arg.Action, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.Details,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByDateRange = `-- name: GetAuditLogsByDateRange :many
SELECT id, user_id, action, resource_type, resource_id, details, ip_address, user_agent, created_at FROM audit_logs WHERE created_at BETWEEN $1 AND $2 ORDER BY created_at DESC
`

type GetAuditLogsByDateRangeParams struct {
	CreatedAt   pgtype.Int8
	CreatedAt_2 pgtype.Int8
}

func (q *Queries) GetAuditLogsByDateRange(ctx context.Context, arg GetAuditLogsByDateRangeParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByDateRange, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.Details,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByResource = `-- name: GetAuditLogsByResource :many
SELECT id, user_id, action, resource_type, resource_id, details, ip_address, user_agent, created_at FROM audit_logs WHERE resource_type = $1 AND resource_id = $2 ORDER BY created_at DESC
`

type GetAuditLogsByResourceParams struct {
	ResourceType string
	ResourceID   pgtype.Text
}

func (q *Queries) GetAuditLogsByResource(ctx context.Context, arg GetAuditLogsByResourceParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByResource, arg.ResourceType, arg.ResourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.Details,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByUser = `-- name: GetAuditLogsByUser :many
SELECT id, user_id, action, resource_type, resource_id, details, ip_address, user_agent, created_at FROM audit_logs WHERE user_id = $1 ORDER BY created_at DESC LIMIT $2
`

type GetAuditLogsByUserParams struct {
	UserID pgtype.UUID
	Limit  int32
}

func (q *Queries) GetAuditLogsByUser(ctx context.Context, arg GetAuditLogsByUserParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.Details,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: password_resets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordReset = `-- name: CreatePasswordReset :one
INSERT INTO password_resets (ps_user_id, ps_reset_token, ps_expires_at)
VALUES ($1, $2, $3)
RETURNING ps_id, ps_user_id, ps_reset_token, ps_expires_at, ps_created_at
`

type CreatePasswordResetParams struct {
	PsUserID     pgtype.UUID
	PsResetToken string
	PsExpiresAt  pgtype.Timestamptz
}

func (q *Queries) CreatePasswordReset(ctx context.Context, arg CreatePasswordResetParams) (PasswordReset, error) {
	row := q.db.QueryRow(ctx, createPasswordReset, arg.PsUserID, arg.PsResetToken, arg.PsExpiresAt)
	var i PasswordReset
	err := row.Scan(
		&i.PsID,
		&i.PsUserID,
		&i.PsResetToken,
		&i.PsExpiresAt,
		&i.PsCreatedAt,
	)
	return i, err
}

const getPasswordReset = `-- name: GetPasswordReset :one
SELECT ps_id, ps_user_id, ps_reset_token, ps_expires_at, ps_created_at FROM password_resets WHERE ps_user_id = $1 AND ps_reset_token = $2
`

type GetPasswordResetParams struct {
	PsUserID     pgtype.UUID
	PsResetToken string
}

func (q *Queries) GetPasswordReset(ctx context.Context, arg GetPasswordResetParams) (PasswordReset, error) {
	row := q.db.QueryRow(ctx, getPasswordReset, arg.PsUserID, arg.PsResetToken)
	var i PasswordReset
	err := row.Scan(
		&i.PsID,
		&i.PsUserID,
		&i.PsResetToken,
		&i.PsExpiresAt,
		&i.PsCreatedAt,
	)
	return i, err
}

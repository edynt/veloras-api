// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (session_user_id, session_refresh_token, session_user_agent, session_client_ip, session_expires_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING session_id, session_user_id, session_refresh_token, session_user_agent, session_client_ip, session_expires_at, session_created_at
`

type CreateSessionParams struct {
	SessionUserID       pgtype.UUID
	SessionRefreshToken string
	SessionUserAgent    pgtype.Text
	SessionClientIp     pgtype.Text
	SessionExpiresAt    pgtype.Timestamptz
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.SessionUserID,
		arg.SessionRefreshToken,
		arg.SessionUserAgent,
		arg.SessionClientIp,
		arg.SessionExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.SessionUserID,
		&i.SessionRefreshToken,
		&i.SessionUserAgent,
		&i.SessionClientIp,
		&i.SessionExpiresAt,
		&i.SessionCreatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE session_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionID int32) error {
	_, err := q.db.Exec(ctx, deleteSession, sessionID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT session_id, session_user_id, session_refresh_token, session_user_agent, session_client_ip, session_expires_at, session_created_at FROM sessions WHERE session_id = $1
`

func (q *Queries) GetSession(ctx context.Context, sessionID int32) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, sessionID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.SessionUserID,
		&i.SessionRefreshToken,
		&i.SessionUserAgent,
		&i.SessionClientIp,
		&i.SessionExpiresAt,
		&i.SessionCreatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (role_name, role_description) VALUES ($1, $2) RETURNING role_id, role_name, role_description, role_created_at
`

type CreateRoleParams struct {
	RoleName        string
	RoleDescription pgtype.Text
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.RoleName, arg.RoleDescription)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.RoleDescription,
		&i.RoleCreatedAt,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT role_id, role_name, role_description, role_created_at FROM roles WHERE role_name = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, roleName string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, roleName)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.RoleDescription,
		&i.RoleCreatedAt,
	)
	return i, err
}

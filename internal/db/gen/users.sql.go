// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_email, user_username, user_hashed_password)
VALUES ($1, $2, $3)
RETURNING user_id, user_email, user_username, user_hashed_password, user_is_verified, user_created_at, user_updated_at
`

type CreateUserParams struct {
	UserEmail          string
	UserUsername       string
	UserHashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.UserEmail, arg.UserUsername, arg.UserHashedPassword)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserEmail,
		&i.UserUsername,
		&i.UserHashedPassword,
		&i.UserIsVerified,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, user_email, user_username, user_hashed_password, user_is_verified, user_created_at, user_updated_at FROM users WHERE user_email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, userEmail string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, userEmail)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserEmail,
		&i.UserUsername,
		&i.UserHashedPassword,
		&i.UserIsVerified,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users SET user_is_verified = TRUE WHERE user_id = $1
`

func (q *Queries) VerifyUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, verifyUser, userID)
	return err
}

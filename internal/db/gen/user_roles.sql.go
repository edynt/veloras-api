// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_roles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO user_roles (ur_user_id, ur_role_id) VALUES ($1, $2)
`

type AssignRoleToUserParams struct {
	UrUserID pgtype.UUID
	UrRoleID pgtype.UUID
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.Exec(ctx, assignRoleToUser, arg.UrUserID, arg.UrRoleID)
	return err
}

const getRolesByUser = `-- name: GetRolesByUser :many
SELECT r.role_id, r.role_name, r.role_description, r.role_created_at FROM roles r
JOIN user_roles ur ON ur.ur_role_id = r.role_id
WHERE ur.ur_user_id = $1
`

func (q *Queries) GetRolesByUser(ctx context.Context, urUserID pgtype.UUID) ([]Role, error) {
	rows, err := q.db.Query(ctx, getRolesByUser, urUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.RoleID,
			&i.RoleName,
			&i.RoleDescription,
			&i.RoleCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

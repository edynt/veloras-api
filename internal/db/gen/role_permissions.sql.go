// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role_permissions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignPermissionToRole = `-- name: AssignPermissionToRole :exec
INSERT INTO role_permissions (role_id, permission_id) VALUES ($1, $2)
`

type AssignPermissionToRoleParams struct {
	RoleID       pgtype.UUID
	PermissionID pgtype.UUID
}

func (q *Queries) AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) error {
	_, err := q.db.Exec(ctx, assignPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const getPermissionsByRole = `-- name: GetPermissionsByRole :many
SELECT p.id, p.name, p.description, p.created_at FROM permissions p
JOIN role_permissions rp ON rp.permission_id = p.permission_id
WHERE rp.role_id = $1
`

func (q *Queries) GetPermissionsByRole(ctx context.Context, roleID pgtype.UUID) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getPermissionsByRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
